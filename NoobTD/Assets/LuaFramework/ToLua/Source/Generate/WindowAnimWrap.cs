//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WindowAnimWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WindowAnim), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("FadeIn", FadeIn);
		L.RegFunction("FadeOut", FadeOut);
		L.RegFunction("GetAlpha", GetAlpha);
		L.RegFunction("SetAlpha", SetAlpha);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("AwakePlay", get_AwakePlay, set_AwakePlay);
		L.RegVar("FadeInScale", get_FadeInScale, set_FadeInScale);
		L.RegVar("FadeOutScale", get_FadeOutScale, set_FadeOutScale);
		L.RegVar("ScaleValue", get_ScaleValue, set_ScaleValue);
		L.RegVar("ContinueTime", get_ContinueTime, set_ContinueTime);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FadeIn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WindowAnim obj = (WindowAnim)ToLua.CheckObject<WindowAnim>(L, 1);
			obj.FadeIn();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FadeOut(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				WindowAnim obj = (WindowAnim)ToLua.CheckObject<WindowAnim>(L, 1);
				obj.FadeOut();
				return 0;
			}
			else if (count == 2)
			{
				WindowAnim obj = (WindowAnim)ToLua.CheckObject<WindowAnim>(L, 1);
				LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
				obj.FadeOut(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WindowAnim.FadeOut");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			WindowAnim obj = (WindowAnim)ToLua.CheckObject<WindowAnim>(L, 1);
			float o = obj.GetAlpha();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			WindowAnim obj = (WindowAnim)ToLua.CheckObject<WindowAnim>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetAlpha(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AwakePlay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WindowAnim obj = (WindowAnim)o;
			bool ret = obj.AwakePlay;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AwakePlay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FadeInScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WindowAnim obj = (WindowAnim)o;
			bool ret = obj.FadeInScale;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FadeInScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FadeOutScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WindowAnim obj = (WindowAnim)o;
			bool ret = obj.FadeOutScale;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FadeOutScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ScaleValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WindowAnim obj = (WindowAnim)o;
			float ret = obj.ScaleValue;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ScaleValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContinueTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WindowAnim obj = (WindowAnim)o;
			float ret = obj.ContinueTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContinueTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AwakePlay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WindowAnim obj = (WindowAnim)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AwakePlay = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AwakePlay on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FadeInScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WindowAnim obj = (WindowAnim)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.FadeInScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FadeInScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FadeOutScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WindowAnim obj = (WindowAnim)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.FadeOutScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FadeOutScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ScaleValue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WindowAnim obj = (WindowAnim)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ScaleValue = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ScaleValue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ContinueTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			WindowAnim obj = (WindowAnim)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ContinueTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContinueTime on a nil value");
		}
	}
}

