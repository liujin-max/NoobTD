//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NoobTD_AssetManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NoobTD.AssetManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("LoadLocal", LoadLocal);
		L.RegFunction("LoadSync", LoadSync);
		L.RegFunction("LoadAsync", LoadAsync);
		L.RegFunction("FileExist", FileExist);
		L.RegFunction("DeleteFile", DeleteFile);
		L.RegFunction("CreateTextFile", CreateTextFile);
		L.RegFunction("LoadText", LoadText);
		L.RegFunction("UnloadNoAtlasSpriteByGloo", UnloadNoAtlasSpriteByGloo);
		L.RegFunction("LoadNoAtlasSprite", LoadNoAtlasSprite);
		L.RegFunction("LoadAtlas", LoadAtlas);
		L.RegFunction("LoadSprite", LoadSprite);
		L.RegFunction("Print", Print);
		L.RegFunction("LightRecycle", LightRecycle);
		L.RegFunction("Recycle", Recycle);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsDebugMode", get_IsDebugMode, set_IsDebugMode);
		L.RegVar("RequestCache", get_RequestCache, set_RequestCache);
		L.RegFunction("OnLoadCallback", NoobTD_AssetManager_OnLoadCallback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.LoadLocal(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.LoadSync(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			NoobTD.AssetManager.OnLoadCallback arg1 = (NoobTD.AssetManager.OnLoadCallback)ToLua.CheckDelegate<NoobTD.AssetManager.OnLoadCallback>(L, 3);
			obj.LoadAsync(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FileExist(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.FileExist(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DeleteFile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateTextFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.CreateTextFile(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.LoadText(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadNoAtlasSpriteByGloo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.UnloadNoAtlasSpriteByGloo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadNoAtlasSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
			UnityEngine.Sprite o = obj.LoadNoAtlasSprite(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAtlas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.LoadAtlas(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 3, typeof(UnityEngine.GameObject));
			UnityEngine.Sprite o = obj.LoadSprite(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Print(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			obj.Print();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LightRecycle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			obj.LightRecycle();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Recycle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)ToLua.CheckObject<NoobTD.AssetManager>(L, 1);
			obj.Recycle();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDebugMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)o;
			bool ret = obj.IsDebugMode;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDebugMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RequestCache(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)o;
			System.Collections.Generic.Dictionary<string,NoobTD.AssetManager.AssetLoadRequest> ret = obj.RequestCache;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RequestCache on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsDebugMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsDebugMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDebugMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RequestCache(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NoobTD.AssetManager obj = (NoobTD.AssetManager)o;
			System.Collections.Generic.Dictionary<string,NoobTD.AssetManager.AssetLoadRequest> arg0 = (System.Collections.Generic.Dictionary<string,NoobTD.AssetManager.AssetLoadRequest>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,NoobTD.AssetManager.AssetLoadRequest>));
			obj.RequestCache = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RequestCache on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NoobTD_AssetManager_OnLoadCallback(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<NoobTD.AssetManager.OnLoadCallback>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<NoobTD.AssetManager.OnLoadCallback>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

