//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NoobTD_EventManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NoobTD.EventManager), typeof(System.Object));
		L.RegFunction("Init", Init);
		L.RegFunction("ClearType", ClearType);
		L.RegFunction("IsRegister", IsRegister);
		L.RegFunction("AddHandler", AddHandler);
		L.RegFunction("AddHandlerWithPriority", AddHandlerWithPriority);
		L.RegFunction("DelInternalHandler", DelInternalHandler);
		L.RegFunction("DelHandler", DelHandler);
		L.RegFunction("SendInteralEvent", SendInteralEvent);
		L.RegFunction("SendEvent", SendEvent);
		L.RegFunction("New", _CreateNoobTD_EventManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("instance", get_instance, null);
		L.RegVar("lua_event_bridge", get_lua_event_bridge, set_lua_event_bridge);
		L.RegFunction("EventHandler", NoobTD_EventManager_EventHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNoobTD_EventManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NoobTD.EventManager obj = new NoobTD.EventManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NoobTD.EventManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.ClearType(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRegister(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				NoobTD.EventManager.EventHandler arg1 = (NoobTD.EventManager.EventHandler)ToLua.CheckDelegate<NoobTD.EventManager.EventHandler>(L, 3);
				bool o = obj.IsRegister(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				NoobTD.EventManager.EventHandler arg1 = (NoobTD.EventManager.EventHandler)ToLua.CheckDelegate<NoobTD.EventManager.EventHandler>(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				bool o = obj.IsRegister(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				NoobTD.EventManager.EventHandler arg1 = (NoobTD.EventManager.EventHandler)ToLua.CheckDelegate<NoobTD.EventManager.EventHandler>(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				bool o = obj.IsRegister(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NoobTD.EventManager.IsRegister");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				NoobTD.EventManager.EventHandler arg1 = (NoobTD.EventManager.EventHandler)ToLua.CheckDelegate<NoobTD.EventManager.EventHandler>(L, 3);
				NoobTD.EventData o = obj.AddHandler(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				NoobTD.EventManager.EventHandler arg1 = (NoobTD.EventManager.EventHandler)ToLua.CheckDelegate<NoobTD.EventManager.EventHandler>(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				NoobTD.EventData o = obj.AddHandler(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				NoobTD.EventManager.EventHandler arg1 = (NoobTD.EventManager.EventHandler)ToLua.CheckDelegate<NoobTD.EventManager.EventHandler>(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				NoobTD.EventData o = obj.AddHandler(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NoobTD.EventManager.AddHandler");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHandlerWithPriority(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				NoobTD.EventManager.EventHandler arg1 = (NoobTD.EventManager.EventHandler)ToLua.CheckDelegate<NoobTD.EventManager.EventHandler>(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				NoobTD.EventData o = obj.AddHandlerWithPriority(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				NoobTD.EventManager.EventHandler arg1 = (NoobTD.EventManager.EventHandler)ToLua.CheckDelegate<NoobTD.EventManager.EventHandler>(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				NoobTD.EventData o = obj.AddHandlerWithPriority(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				NoobTD.EventManager.EventHandler arg1 = (NoobTD.EventManager.EventHandler)ToLua.CheckDelegate<NoobTD.EventManager.EventHandler>(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				object arg4 = ToLua.ToVarObject(L, 6);
				NoobTD.EventData o = obj.AddHandlerWithPriority(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NoobTD.EventManager.AddHandlerWithPriority");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DelInternalHandler(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.DelInternalHandler(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DelHandler(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.CheckObject<NoobTD.EventManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			NoobTD.EventData arg1 = (NoobTD.EventData)ToLua.CheckObject<NoobTD.EventData>(L, 3);
			obj.DelHandler(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendInteralEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<NoobTD.EventManager, string, object>(L, 1))
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.SendInteralEvent(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<NoobTD.EventManager, string, object>(L, 1) && TypeChecker.CheckParamsType<object>(L, 4, count - 3))
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
				obj.SendInteralEvent(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NoobTD.EventManager.SendInteralEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<NoobTD.EventManager, string, object>(L, 1))
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.SendEvent(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<NoobTD.EventManager, string, object>(L, 1) && TypeChecker.CheckParamsType<object>(L, 4, count - 3))
			{
				NoobTD.EventManager obj = (NoobTD.EventManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
				obj.SendEvent(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NoobTD.EventManager.SendEvent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, NoobTD.EventManager.instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lua_event_bridge(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NoobTD.EventManager obj = (NoobTD.EventManager)o;
			LuaInterface.LuaFunction ret = obj.lua_event_bridge;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lua_event_bridge on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lua_event_bridge(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NoobTD.EventManager obj = (NoobTD.EventManager)o;
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.lua_event_bridge = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index lua_event_bridge on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NoobTD_EventManager_EventHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<NoobTD.EventManager.EventHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<NoobTD.EventManager.EventHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

