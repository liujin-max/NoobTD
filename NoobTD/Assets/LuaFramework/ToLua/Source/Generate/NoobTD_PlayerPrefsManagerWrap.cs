//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NoobTD_PlayerPrefsManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NoobTD.PlayerPrefsManager), typeof(System.Object));
		L.RegFunction("SetIntKey", SetIntKey);
		L.RegFunction("GetIntByKey", GetIntByKey);
		L.RegFunction("New", _CreateNoobTD_PlayerPrefsManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNoobTD_PlayerPrefsManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NoobTD.PlayerPrefsManager obj = new NoobTD.PlayerPrefsManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NoobTD.PlayerPrefsManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIntKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			NoobTD.PlayerPrefsManager.SetIntKey(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIntByKey(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int o = NoobTD.PlayerPrefsManager.GetIntByKey(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int o = NoobTD.PlayerPrefsManager.GetIntByKey(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NoobTD.PlayerPrefsManager.GetIntByKey");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

